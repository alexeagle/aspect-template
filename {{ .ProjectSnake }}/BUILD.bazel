"""Targets in the workspace root"""{{ if or .Computed.javascript .Computed.python }}
{{ if .Computed.javascript }}
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@npm//:defs.bzl", "npm_link_all_packages"){{ end }}{{ if .Computed.python }}
load("@rules_python//python:pip.bzl", "compile_pip_requirements"){{ end }}{{ end }}
{{- if .Scaffold.lint }}

alias(
    name = "format",
    actual = "//tools/format",
)

exports_files(
    [
        ".shellcheckrc",
{{- if .Computed.python }}
        "pyproject.toml",
{{- end }}
    ],
    visibility = ["//:__subpackages__"],
)
{{- end }}
{{- if .Computed.javascript }}

npm_link_all_packages(name = "node_modules")
{{- if .Scaffold.lint }}

js_library(
    name = "eslintrc",
    srcs = ["eslint.config.mjs"],
    visibility = ["//:__subpackages__"],
    deps = [
        ":node_modules/@eslint/js",
        ":node_modules/typescript-eslint",
    ],
)
{{- end }}
{{- end }}
{{- if .Computed.python }}

# Set `aspect configure` to produce aspect_rules_py targets rather than rules_python
# aspect:map_kind py_binary py_binary @aspect_rules_py//py:defs.bzl
# aspect:map_kind py_library py_library @aspect_rules_py//py:defs.bzl
# aspect:map_kind py_test py_test @aspect_rules_py//py:defs.bzl
compile_pip_requirements(
    name = "requirements",
    requirements_in = "pyproject.toml",
    requirements_txt = "requirements_lock.txt",
)
{{- end }}
